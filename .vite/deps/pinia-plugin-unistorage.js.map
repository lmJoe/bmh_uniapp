{
  "version": 3,
  "sources": ["../../node_modules/pinia-plugin-unistorage/dist/index.mjs"],
  "sourcesContent": ["// uni_modules/pinia-plugin-unistorage/shared/filter.js\nfunction get(state, path) {\n  return path.reduce((obj, p) => {\n    return obj == null ? void 0 : obj[p];\n  }, state);\n}\nfunction set(state, path, val) {\n  return path.slice(0, -1).reduce((obj, p) => {\n    if (!/^(__proto__)$/.test(p))\n      return obj[p] = obj[p] || {};\n    else\n      return {};\n  }, state)[path[path.length - 1]] = val, state;\n}\nfunction pick(baseState, paths) {\n  return paths.reduce((substate, path) => {\n    const pathArray = path.split(\".\");\n    return set(substate, pathArray, get(baseState, pathArray));\n  }, {});\n}\n\n// uni_modules/pinia-plugin-unistorage/shared/normalize.js\nvar isObject = (v) => typeof v === \"object\" && v !== null;\nvar normalizeOptions = (options, globalOptions) => {\n  options = isObject(options) ? options : /* @__PURE__ */ Object.create(null);\n  return new Proxy(options, {\n    get(t, p, r) {\n      return Reflect.get(t, p, r) || Reflect.get(globalOptions, p, r);\n    }\n  });\n};\n\n// uni_modules/pinia-plugin-unistorage/index.js\nfunction createUnistorage(globalOptions = {}) {\n  return function(ctx) {\n    {\n      const { store, options } = ctx;\n      let { unistorage } = options || {};\n      if (!unistorage)\n        return;\n      const {\n        paths = null,\n        afterRestore,\n        beforeRestore,\n        serializer = {\n          serialize: JSON.stringify,\n          deserialize: JSON.parse\n        },\n        key = store.$id\n      } = normalizeOptions(unistorage, globalOptions);\n      beforeRestore == null ? void 0 : beforeRestore(ctx);\n      try {\n        const fromStorage = uni.getStorageSync(store.$id);\n        if (fromStorage)\n          store.$patch(serializer.deserialize(fromStorage));\n      } catch (_error) {\n      }\n      afterRestore == null ? void 0 : afterRestore(ctx);\n      store.$subscribe((_, state) => {\n        try {\n          const toStore = Array.isArray(paths) ? pick(state, paths) : state;\n          uni.setStorageSync(key, serializer.serialize(toStore));\n        } catch (_error) {\n        }\n      }, { detached: true });\n    }\n  };\n}\nexport {\n  createUnistorage\n};\n"],
  "mappings": ";;;AACA,aAAa,OAAO,MAAM;AACxB,SAAO,KAAK,OAAO,CAAC,KAAK,MAAM;AAC7B,WAAO,OAAO,OAAO,SAAS,IAAI;AAAA,EACpC,GAAG,KAAK;AACV;AACA,aAAa,OAAO,MAAM,KAAK;AAC7B,SAAO,KAAK,MAAM,GAAG,EAAE,EAAE,OAAO,CAAC,KAAK,MAAM;AAC1C,QAAI,CAAC,gBAAgB,KAAK,CAAC;AACzB,aAAO,IAAI,KAAK,IAAI,MAAM,CAAC;AAAA;AAE3B,aAAO,CAAC;AAAA,EACZ,GAAG,KAAK,EAAE,KAAK,KAAK,SAAS,MAAM,KAAK;AAC1C;AACA,cAAc,WAAW,OAAO;AAC9B,SAAO,MAAM,OAAO,CAAC,UAAU,SAAS;AACtC,UAAM,YAAY,KAAK,MAAM,GAAG;AAChC,WAAO,IAAI,UAAU,WAAW,IAAI,WAAW,SAAS,CAAC;AAAA,EAC3D,GAAG,CAAC,CAAC;AACP;AAGA,IAAI,WAAW,CAAC,MAAM,OAAO,MAAM,YAAY,MAAM;AACrD,IAAI,mBAAmB,CAAC,SAAS,kBAAkB;AACjD,YAAU,SAAS,OAAO,IAAI,UAA0B,uBAAO,OAAO,IAAI;AAC1E,SAAO,IAAI,MAAM,SAAS;AAAA,IACxB,IAAI,GAAG,GAAG,GAAG;AACX,aAAO,QAAQ,IAAI,GAAG,GAAG,CAAC,KAAK,QAAQ,IAAI,eAAe,GAAG,CAAC;AAAA,IAChE;AAAA,EACF,CAAC;AACH;AAGA,0BAA0B,gBAAgB,CAAC,GAAG;AAC5C,SAAO,SAAS,KAAK;AACnB;AACE,YAAM,EAAE,OAAO,YAAY;AAC3B,UAAI,EAAE,eAAe,WAAW,CAAC;AACjC,UAAI,CAAC;AACH;AACF,YAAM;AAAA,QACJ,QAAQ;AAAA,QACR;AAAA,QACA;AAAA,QACA,aAAa;AAAA,UACX,WAAW,KAAK;AAAA,UAChB,aAAa,KAAK;AAAA,QACpB;AAAA,QACA,MAAM,MAAM;AAAA,UACV,iBAAiB,YAAY,aAAa;AAC9C,uBAAiB,OAAO,SAAS,cAAc,GAAG;AAClD,UAAI;AACF,cAAM,cAAc,IAAI,eAAe,MAAM,GAAG;AAChD,YAAI;AACF,gBAAM,OAAO,WAAW,YAAY,WAAW,CAAC;AAAA,MACpD,SAAS,QAAP;AAAA,MACF;AACA,sBAAgB,OAAO,SAAS,aAAa,GAAG;AAChD,YAAM,WAAW,CAAC,GAAG,UAAU;AAC7B,YAAI;AACF,gBAAM,UAAU,MAAM,QAAQ,KAAK,IAAI,KAAK,OAAO,KAAK,IAAI;AAC5D,cAAI,eAAe,KAAK,WAAW,UAAU,OAAO,CAAC;AAAA,QACvD,SAAS,QAAP;AAAA,QACF;AAAA,MACF,GAAG,EAAE,UAAU,KAAK,CAAC;AAAA,IACvB;AAAA,EACF;AACF;",
  "names": []
}
